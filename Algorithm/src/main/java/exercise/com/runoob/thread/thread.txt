Java 提供了三种创建线程的方法：

1. 通过实现 Runnable 接口；
2. 通过继承 Thread 类本身；
3. 通过 Callable 和 Future 创建线程。

创建线程的三种方式的对比
1. 采用实现 Runnable、Callable 接口的方式创建多线程时，线程类只是实现了 Runnable 接口或 Callable 接口，还可以继承其他类。
2. 使用继承 Thread 类的方式创建多线程时，编写简单，如果需要访问当前线程，则无需使用 Thread.currentThread() 方法，
   直接使用 this 即可获得当前线程。

===================================================================================================
线程池

线程池主要用来解决线程生命周期开销问题和资源不足问题。通过对多个任务重复使用线程，
线程创建的开销就被分摊到了多个任务上了，而且由于在请求到达时线程已经存在，所以消除了线程创建所带来的延迟。
这样，就可以立即为请求服务，使用应用程序响应更快；另外，通过适当的调整线程中的线程数目可以防止出现资源不足的情况。

1.线程池都是通过线程池工厂创建，再调用线程池中的方法获取线程，再通过线程去执行任务方法。

 Executors：线程池创建工厂类
 public static ExecutorServicenewFixedThreadPool(int nThreads)：返回线程池对象
 ExecutorService：线程池类
 Future<?> submit(Runnable task)：获取线程池中的某一个线程对象，并执行
 Future 接口：用来记录线程任务执行完毕后产生的结果。线程池创建与使用

 1）：使用Runnable接口创建线程池

 使用线程池中线程对象的步骤：
  1、创建线程池对象
  2、创建 Runnable 接口子类对象
  3、提交 Runnable 接口子类对象
  4、关闭线程池

 2）使用Callable接口创建线程池

 Callable接口：与Runnable接口功能相似，用来指定线程的任务。
 其中的call()方法，用来返回线程任务执行完毕后的结果，call方法可抛出异常。

 ExecutorService：线程池类
 <T> Future<T> submit(Callable<T> task)：获取线程池中的某一个线程对象，并执行线程中的 call() 方法
 Future 接口：用来记录线程任务执行完毕后产生的结果。线程池创建与使用

 使用线程池中线程对象的步骤：

  1、创建线程池对象
  2、创建 Callable 接口子类对象
  3、提交 Callable 接口子类对象
  4、关闭线程池